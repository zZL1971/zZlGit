package com.mw.framework.utils;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.URL;
import java.security.MessageDigest;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Random;

import org.apache.commons.lang.StringUtils;


public class ZStringUtils extends StringUtils {
	public ZStringUtils() {
	}

	public static String md5(String piStr) {
		if (isNullOrSpace(piStr)) {
			piStr = "";
		}
		String encodeStr = "";
		byte digesta[] = null;
		try {
			MessageDigest alg = MessageDigest.getInstance("MD5");
			alg.update(piStr.getBytes());
			digesta = alg.digest();
			encodeStr = byte2hex(digesta);
		} catch (Exception exception) {
		}
		return encodeStr;
	}

	public static boolean isEmpty(Object str) {
		return str == null || "".equals(str.toString().trim());
	}

	public static boolean isNotEmpty(Object str) {
		return !isEmpty(str);
	}

	public static String resolverStr(Object obj) {
		if(obj!=null) {
			return obj.toString();
		}
		return "";
	}
	public static String killNullToStr(String str) {
		if (str == null)
			return "";
		else
			return str;
	}
	public static String killNullToStr(Object str) {
		if (str == null)
			return "";
		else
			return str.toString();
	}

	private static String byte2hex(byte piByte[]) {
		String reStr = "";
		@SuppressWarnings("unused")
		String tmpStr = "";
		for (byte element : piByte) {
			int v = element & 0xff;
			if (v < 16) {
				reStr = reStr + "0";
			}
			reStr = reStr + Integer.toString(v, 16).toLowerCase();
		}
		return reStr;
	}

	public static String iso2GB(String str) {
		try {
			if (str != null) {
				str = new String(str.getBytes("ISO-8859-1"), "GB2312");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return str;
	}

	public static String gb2ISO(String str) {
		try {
			if (str != null) {
				str = new String(str.getBytes("GB2312"), "ISO-8859-1");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return str;
	}

	public static String iso2UTF(String str) {
		try {
			if (str != null) {
				str = new String(str.getBytes("ISO-8859-1"), "UTF-8");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return str;
	}

	/**
	 * 判断字符串是否为空
	 * 
	 * @param str
	 * @return
	 */
	public static boolean isNullOrSpace(String str) {
		return (str == null) || (str.trim().length() < 1);
	}

	/**
	 * 将""字符转换成null，如果不是"",返回原值；
	 * 
	 * @param str
	 * @return
	 */
	public static String spaceToNull(String str) {
		if (str != null) {
			if ("".equals(str.trim())) {
				return null;
			}
		}
		return str;
	}

	/**
	 * 将null转换成""字符，如果不是null,返回原值；
	 * 
	 * @param str
	 * @return
	 */
	public static String nullToSpace(String str) {
		if (str != null) {
			if ("".equals(str.trim())) {
				return null;
			}
		}
		return str;
	}

	/**
	 * 判断List是否为空
	 * 
	 * @param list
	 * @return
	 */
	public static boolean isNullList(List list) {
		return (list == null || list.isEmpty());
	}

	// public static final String replace(String mainString, String oldString,
	// String newString) {
	// if (mainString == null) {
	// return null;
	// }
	// int i = mainString.lastIndexOf(oldString);
	// if (i < 0) {
	// return mainString;
	// }
	// StringBuffer mainSb = new StringBuffer(mainString);
	// for (; i >= 0; i = mainString.lastIndexOf(oldString, i - 1)) {
	//
	// mainSb.replace(i, i + oldString.length(), newString);
	// }
	// return mainSb.toString();
	// }

	/**
	 * 模糊查询。统一转换为大写.并由*替换为%
	 * 
	 * @param search
	 * @return
	 */
	public static String manySearchMatch(String search) {
		search = search.toUpperCase().trim();
		return searchMatch(search);
	}

	/**
	 * 精确查询。转换为大写。
	 * 
	 * @param search
	 * @return
	 */
	public static String onlySearchMatch(String search) {
		search = search.trim();

		search = StringUtils.replace(search, "'", "''");

		return search;
	}

	/**
	 * 用于模糊查询.判断前后是否有*，如有*号用%替换，生成新的字符串
	 * 
	 * @param search
	 * @return
	 */
	public static String searchMatch(String search) {
		search = StringUtils.replace(search, "'", "''");
		search = StringUtils.replace(search, "/", "//");
		search = StringUtils.replace(search, "%", "/%");
		search = StringUtils.replace(search, "_", "/_");

		search = search.replaceAll("\\*", "%");
		System.out.println(search);
		//		
		// if (search.startsWith("*")) {
		// search = StringUtils.replace(search, "*", "%", 1);
		// }
		// if (search.endsWith("*")) {
		// int i = search.lastIndexOf("*");
		// StringBuffer searchBuf = new StringBuffer(search);
		// searchBuf.replace(i, i + 1, "%");
		// search = searchBuf.toString();
		// }
		return search;
	}

	/**
	 * 判断是否符合精确或模糊查询条件。
	 * 
	 * @param search
	 * @return
	 */
	public static String isSearchMatch(String search) {
		if (isNullOrSpace(search)) {
			return null;
		} else if (search.indexOf(";") > 0||search.indexOf(",") > 0) {
			return "SCOPE";
		} else if (search.contains("*")) {
			return "MANY";
		} else {
			return "ONLY";
		}
	}

	// 用于日期查询字段。去掉名字后面后的From或To;
	public static String getSearchNameForDate(String search) {
		if (search.endsWith("From")) {
			int i = search.lastIndexOf("From");
			StringBuffer searchBuf = new StringBuffer(search);
			searchBuf.replace(i, i + 4, "");
			search = searchBuf.toString();
		} else if (search.endsWith("To")) {
			int i = search.lastIndexOf("To");
			StringBuffer searchBuf = new StringBuffer(search);
			searchBuf.replace(i, i + 2, "");
			search = searchBuf.toString();
		} else if (search.endsWith("_Date")) {
			int i = search.lastIndexOf("_Date");
			StringBuffer searchBuf = new StringBuffer(search);
			searchBuf.replace(i, i + 5, "");
			search = searchBuf.toString();
		} else {
			search = null;
		}
		return search;
	}

	/**
	 * Long类型ID判断
	 * 
	 * @param id
	 * @return
	 */
	public static boolean nullOrZero(Long id) {
		return (id == null || id.longValue() == 0);
	}

	public static boolean isEmptyForInt(Integer id) {
		return (id == null || id.intValue() == 0);
	}

	/**
	 * 用于判断Double类型的值
	 * 
	 */
	public static boolean nullOrZeroByDouble(Double num) {
		return (num == null || num.intValue() == 0);
	}

	public static Double checkDouble(Double num) {
		if (nullOrZeroByDouble(num)) {
			num = new Double(0);
		}
		return num;
	}

	public static final String safeStr(String s) {
		String ret = replace(s, "'", "");
		ret = replace(ret, "\"", "");
		return ret;
	}

	public static final String substring(String s, int start, int end) {
		if (s == null)
			return null;
		int length = s.length();
		if (end > length) {
			return null;
		}
		return s.substring(start, end);
	}

	public static boolean isEmpty(String str) {
		return str == null || str.equals("");
	}

	public static boolean isNotEmpty(String str) {
		return !ZStringUtils.isEmpty(str);
	}

	public static boolean isEmptyValue(String str) {
		return str == null || str.equals("") || str.equals("0");
	}

	public static String trimToDay(String value) {
		if (isEmpty(value))
			return "9999-01-01";
		int idx = value.indexOf(" ");
		return idx == -1 ? value : value.substring(0, idx);
	}

	public static String toDate(String value) {
		return "to_date( '" + trimToDay(value) + "','yyyy-mm-dd' )";
	}

	private static final String SPLITTER = ";";
	private static final String SPLITTER2 = ",";

	// 传入的是A;B;(有分号结束)或A;B;C(无分号结束)格式的字符串
	// 转为SQL语句格式
	public static String StringFHConvertSQL(String strValueFH) {
		String[] strs = StringUtils.split(strValueFH, SPLITTER);
		StringBuffer strBuf = new StringBuffer();
		for (int i = 0; i < strs.length - 1; i++) {
			strBuf.append("'" + strs[i] + "'");
			strBuf.append(SPLITTER2);
		}
		strBuf.append("'" + strs[strs.length - 1] + "'");
		return strBuf.toString();
	}

	public static String listToStringDH(List strList) {
		StringBuffer strBuf = new StringBuffer();
		for (int i = 0; i < strList.size() - 1; i++) {
			strBuf.append(strList.get(i)).append(SPLITTER2);
		}
		strBuf.append(strList.get(strList.size() - 1));
		return strBuf.toString();
	}

	/**
	 * 将list转换成sql语句的in形式
	 * 
	 * @author jamesluo luoliuqiang@sina.com 2011-1-5 下午01:38:14
	 * @param strList
	 * @return
	 */
	public static String listToStringConvertSQL(List strList) {
		if (!(strList == null || strList.isEmpty())) {
			StringBuffer strBuf = new StringBuffer();
			for (int i = 0; i < strList.size() - 1; i++) {
				strBuf.append("'" + strList.get(i).toString() + "'");
				strBuf.append(SPLITTER2);
			}
			strBuf.append("'" + strList.get(strList.size() - 1).toString() + "'");
			return strBuf.toString();
		} else {
			return null;
		}
	}
	
	/**
	 * 将list转换成sql语句的in形式
	 * 
	 * @author jamesluo luoliuqiang@sina.com 2011-1-5 下午01:38:14
	 * @param strList
	 * @return
	 */
	public static String CollectionToStringConvertSQL(Collection<String> strList) {
		if (!(strList == null || strList.isEmpty())) {
			StringBuffer strBuf = new StringBuffer();
			Iterator<String> it = strList.iterator();
			for (int i = 0; i < strList.size() - 1; i++) {
				strBuf.append("'" + it.next()+ "'");
				strBuf.append(SPLITTER2);
			}
			strBuf.append("'" + it.next() + "'");
			return strBuf.toString();
		} else {
			return null;
		}
	}

	/**
	 * 将list转换成sql语句的in形式
	 * 
	 * @author jamesluo luoliuqiang@sina.com 2011-1-5 下午01:38:14
	 * @param strList
	 * @return
	 */
	public static String listToStringConvertSQL(HashSet<String> strList) {
		if (!(strList == null || strList.isEmpty())) {
			StringBuffer strBuf = new StringBuffer();
			Iterator<String> it = strList.iterator();
			while (it.hasNext()) {
				strBuf.append("'" + it.next() + "'");
				strBuf.append(SPLITTER2);
			}
			return strBuf.toString().substring(0, strBuf.toString().length() - 1);
		} else {
			return null;
		}
	}

	public static List<String> convertStringArrayToList(String[] arrays) {
		if (arrays != null && arrays.length > 0) {
			// List<String> list = new ArrayList<String>();
			// for(String array : arrays){
			// if(array!=null&&!array.trim().equals("")){
			// list.add(array.trim());
			// }
			// }
			List<String> list = Arrays.asList(arrays);
			return list;
		} else {// 避免空指针
			return new ArrayList<String>();
		}
	}

	public static String deleteDoubleZero(Double num) {
		String str = num.toString();
		if (num == 0)
			return "";
		try {
			int i = str.indexOf(".");
			String str1 = str.substring(i + 1);// 小数位
			Double num1 = Double.valueOf(str1);
			if (num1 == 0)
				str = str.substring(0, i);
		} catch (Exception e) {
			// 不作处理
		}
		return str;
	}

	/**
	 * 随机生成字母、数字字符串方法
	 * 
	 * @param length
	 * @return
	 */
	public static String getRandomCharacterAndNumber(int length) {
		String val = "";

		Random random = new Random();
		for (int i = 0; i < length; i++) {
			String charOrNum = random.nextInt(2) % 2 == 0 ? "char" : "num"; // 输出字母还是数字

			if ("char".equalsIgnoreCase(charOrNum)) // 字符串
			{
				int choice = random.nextInt(2) % 2 == 0 ? 65 : 97; // 取得大写字母还是小写字母
				val += (char) (choice + random.nextInt(26));
			} else if ("num".equalsIgnoreCase(charOrNum)) // 数字
			{
				val += String.valueOf(random.nextInt(10));
			}
		}

		return val;
	}

	/** ***************************************************************************** */

	private static String strChineseFirstPY = "";

	/**
	 * 将一字符串转换成拼音首字母
	 * 
	 * @since 1.1
	 * @param strText
	 *            字符串
	 * @return 字符串对应的拼音首字母
	 */
	public static String getFirstPY(String strText) {
		if (strText == null || strText.trim().length() == 0)
			return "";
		String ret = "";
		for (int i = 0; i < strText.length(); i++) {
			char ch = strText.charAt(i);
			if ('\u4E00' <= ch && '\u9FA5' >= ch)
				ret = ret + strChineseFirstPY.charAt(ch - 19968);
			else
				ret = ret + ch;
		}

		return ret;
	}

	/**
	 * 替换字符串
	 * 
	 * @since 1.1
	 * @param strSc
	 *            需要进行替换的字符串
	 * @param oldStr
	 *            源字符串
	 * @param newStr
	 *            替换后的字符串
	 * @return 替换后对应的字符串
	 */
	public static String replace(String strSc, String oldStr, String newStr) {
		String ret = strSc;
		if (ret != null && oldStr != null && newStr != null) {
			ret = strSc.replaceAll(oldStr, newStr);
		}
		return ret;
	}

	/**
	 * 替换字符串，修复java.lang.String类的replaceAll方法时第一参数是字符串常量正则时(如："address".
	 * replaceAll("dd","$");)的抛出异常：java.lang.StringIndexOutOfBoundsException:
	 * String index out of range: 1的问题。
	 * 
	 * @since 1.2
	 * @param strSc
	 *            需要进行替换的字符串
	 * @param oldStr
	 *            源字符串
	 * @param newStr
	 *            替换后的字符串
	 * @return 替换后对应的字符串
	 */
	public static String replaceAll(String strSc, String oldStr, String newStr) {
		int i = -1;
		while ((i = strSc.indexOf(oldStr)) != -1) {
			strSc = new StringBuffer(strSc.substring(0, i)).append(newStr).append(strSc.substring(i + oldStr.length()))
					.toString();
		}
		return strSc;
	}

	/**
	 * 将字符串转换成HTML格式的字符串
	 * 
	 * @since 1.1
	 * @param str
	 *            需要进行转换的字符串
	 * @return 转换后的字符串
	 */
	public static String toHtml(String str) {
		String html = str;
		if (str == null || str.length() == 0) {
			return "";
		} else {
			html = replace(html, "&", "&");
			html = replace(html, "<", "<");
			html = replace(html, ">", ">");
			html = replace(html, "\r\n", "\n");
			html = replace(html, "\n", "<br>\n");
			// html = replace(html, "\"", """);
			html = replace(html, " ", " ");
			return html;
		}
	}

	/**
	 * 将HTML格式的字符串转换成常规显示的字符串
	 * 
	 * @since 1.1
	 * @param str
	 *            需要进行转换的字符串
	 * @return 转换后的字符串
	 */
	public static String toText(String str) {
		String text = str;
		if (str == null || str.length() == 0) {
			return "";
		} else {
			text = replace(text, "&", "&");
			text = replace(text, "<", "<");
			text = replace(text, ">", ">");
			text = replace(text, "<br>\n", "\n");
			text = replace(text, "<br>", "\n");
			// text = replace(text, """, "\"");
			text = replace(text, " ", " ");
			return text;
		}
	}

	/**
	 * 将一字符串数组以某特定的字符串作为分隔来变成字符串
	 * 
	 * @since 1.0
	 * @param strs
	 *            字符串数组
	 * @param token
	 *            分隔字符串
	 * @return 以token为分隔的字符串
	 */
	public static String join(String[] strs, String token) {
		if (strs == null)
			return null;
		StringBuffer sb = new StringBuffer();
		for (int i = 0; i < strs.length; i++) {
			if (i != 0)
				sb.append(token);
			sb.append(strs[i]);
		}
		return sb.toString();
	}

	/**
	 * 将一字符串以某特定的字符串作为分隔来变成字符串数组
	 * 
	 * @since 1.0
	 * @param str
	 *            需要拆分的字符串("@12@34@56")
	 * @param token
	 *            分隔字符串("@")
	 * @return 以token为分隔的拆分开的字符串数组
	 */
	public static String[] split(String str, String token) {
		String temp = str.substring(1, str.length());
		return temp.split(token);
	}

	/**
	 * 验证字符串合法性
	 * 
	 * @since 1.0
	 * @param str
	 *            需要验证的字符串
	 * @param test
	 *            非法字符串（如："~!#$%^&*()',;:?"）
	 * @return true:非法;false:合法
	 */
	public static boolean check(String str, String test) {
		if (str == null || str.equals(""))
			return true;
		boolean flag = false;
		for (int i = 0; i < test.length(); i++) {
			if (str.indexOf(test.charAt(i)) != -1) {
				flag = true;
				break;
			}
		}
		return flag;
	}

	/**
	 * 将数值型字符串转换成Integer型
	 * 
	 * @since 1.0
	 * @param str
	 *            需要转换的字符型字符串
	 * @param ret
	 *            转换失败时返回的值
	 * @return 成功则返回转换后的Integer型值；失败则返回ret
	 */
	public static Integer String2Integer(String str, Integer ret) {
		try {
			return Integer.parseInt(str);
		} catch (NumberFormatException e) {
			return ret;
		}
	}

	/**
	 * 将数值型转换成字符串
	 * 
	 * @since 1.0
	 * @param it
	 *            需要转换的Integer型值
	 * @param ret
	 *            转换失败的返回值
	 * @return 成功则返回转换后的字符串；失败则返回ret
	 */
	public static String Integer2String(Integer it, String ret) {
		try {
			return Integer.toString(it);
		} catch (NumberFormatException e) {
			return ret;
		}
	}

	/**
	 * 比较两字符串大小(ASCII码顺序)
	 * 
	 * @since 1.1
	 * @param str1
	 *            参与比较的字符串1
	 * @param str2
	 *            参与比较的字符串2
	 * @return str1>str2:1;str1<str2:-1;str1=str2:0
	 */
	public static int compare(String str1, String str2) {//
		if (str1.equals(str2)) {
			return 0;
		}
		int str1Length = str1.length();
		int str2Length = str2.length();
		int length = 0;
		if (str1Length > str2Length) {
			length = str2Length;
		} else {
			length = str1Length;
		}
		for (int i = 0; i < length; i++) {
			if (str1.charAt(i) > str2.charAt(i)) {
				return 1;
			}
		}
		return -1;
	}

	/**
	 * 将阿拉伯数字的钱数转换成中文方式
	 * 
	 * @since 1.1
	 * @param num
	 *            需要转换的钱的阿拉伯数字形式
	 * @return 转换后的中文形式
	 */
	public static String num2Chinese(double num) {
		String result = "";
		String str = Double.toString(num);
		if (str.contains(".")) {
			String begin = str.substring(0, str.indexOf("."));
			String end = str.substring(str.indexOf(".") + 1, str.length());
			byte[] b = begin.getBytes();
			int j = b.length;
			for (int i = 0, k = j; i < j; i++, k--) {
				result += getConvert(begin.charAt(i));
				if (!"零".equals(result.charAt(result.length() - 1) + "")) {
					result += getWei(k);
				}

			}
			for (int i = 0; i < result.length(); i++) {
				result = result.replaceAll("零零", "零");
			}
			if ("零".equals(result.charAt(result.length() - 1) + "")) {
				result = result.substring(0, result.length() - 1);
			}
			result += "元";
			byte[] bb = end.getBytes();
			int jj = bb.length;
			for (int i = 0, k = jj; i < jj; i++, k--) {
				result += getConvert(end.charAt(i));
				if (bb.length == 1) {
					result += "角";
				} else if (bb.length == 2) {
					result += getFloat(k);
				}
			}
		} else {
			byte[] b = str.getBytes();
			int j = b.length;
			for (int i = 0, k = j; i < j; i++, k--) {
				result += getConvert(str.charAt(i));
				result += getWei(k);
			}
		}
		return result;
	}

	private static String getConvert(char num) {
		if (num == '0') {
			return "零";
		} else if (num == '1') {
			return "一";
		} else if (num == '2') {
			return "二";
		} else if (num == '3') {
			return "三";
		} else if (num == '4') {
			return "四";
		} else if (num == '5') {
			return "五";
		} else if (num == '6') {
			return "六";
		} else if (num == '7') {
			return "七";
		} else if (num == '8') {
			return "八";
		} else if (num == '9') {
			return "九";
		} else {
			return "";
		}
	}

	private static String getFloat(int num) {
		if (num == 2) {
			return "角";
		} else if (num == 1) {
			return "分";
		} else {
			return "";
		}
	}

	private static String getWei(int num) {
		if (num == 1) {
			return "";
		} else if (num == 2) {
			return "十";
		} else if (num == 3) {
			return "百";
		} else if (num == 4) {
			return "千";
		} else if (num == 5) {
			return "万";
		} else if (num == 6) {
			return "十";
		} else if (num == 7) {
			return "百";
		} else if (num == 8) {
			return "千";
		} else if (num == 9) {
			return "亿";
		} else if (num == 10) {
			return "十";
		} else if (num == 11) {
			return "百";
		} else if (num == 12) {
			return "千";
		} else if (num == 13) {
			return "兆";
		} else {
			return "";
		}
	}

	/**
	 * 将字符串的首字母改为大写
	 * 
	 * @since 1.2
	 * @param str
	 *            需要改写的字符串
	 * @return 改写后的字符串
	 */
	public static String firstToUpper(String str) {
		return str.substring(0, 1).toUpperCase() + str.substring(1);
	}

	/**
	 * 将字符串的首字母改为大写
	 * 
	 * @since 1.2
	 * @param str
	 *            需要改写的字符串
	 * @return 改写后的字符串
	 */
	public static String firstToLower(String str) {
		return str.substring(0, 1).toLowerCase() + str.substring(1);
	}

	/**
	 * 补零 前导零 将数字串补0到length位
	 * 
	 * 也可以类似 substring((10000+n),1,4)，单性能不知道如何，放弃
	 * 
	 * @return
	 */
	public static String ZeroPer(String str, int length) {
		if (str == null)
			return str;
		while (str.length() < length) {
			str = "0" + str;
		}
		return str;
	}

	public static Object saveGetArray(Object[] a, int i) {
		if (a.length > i) {
			return a[i];
		}
		return "111111111111111111111111111111";
	}

	public static void main(String[] args) throws ParseException, CloneNotSupportedException {
		// List<String> hs = new ArrayList<String>();
		String zkey = "2011KB02a111111e";
		 if(StringUtil.isNotEmpty(zkey)&&zkey.length()>8){
			 String bukrs = zkey.substring(0,4);
			 String gjahr = zkey.substring(4,8);
			 String billNo =  zkey.substring(8);
			 System.out.println(bukrs);
			 System.out.println(gjahr);
			 System.out.println(billNo);
			 }

	}

	static public String LPad(String s, int bits, char pad) {
		if (s == null) {
			s = "";
		}
		if (s.length() >= bits) {
			return s.substring(0, bits);
		}

		StringBuffer sb = new StringBuffer();
		for (int i = 0; i < bits - s.length(); i++) {
			sb.append(pad);
		}
		sb.append(s);

		return sb.toString();
	}

	static public String RPad(String s, int bits, char pad) {
		if (s.length() >= bits) {
			return s.substring(s.length() - bits, s.length());
		}

		StringBuffer sb = new StringBuffer(s);
		for (int i = 0; i < bits - s.length(); i++) {
			sb.append(pad);
		}

		return sb.toString();
	}

	static public String RPadNoCut(String s, int bits, char pad) {
		StringBuffer sb = new StringBuffer(s);
		for (int i = 0; i < bits - s.length(); i++) {
			sb.append(pad);
		}
		return sb.toString();
	}

	/**
	 * 将一字符串以某特定的字符串作为分隔,然后将对应的字符以：分割成key－value的形式的。返回一个map
	 * 
	 * @since 1.0
	 * @param str
	 *            需要拆分的字符串("@12@34@56")
	 * @param token
	 *            分隔字符串("@")
	 * @return 以token为分隔的拆分开的字符串数组
	 */
	public static Map<String, String> split4Map(String str, String token, String subToken) {
		Map<String, String> map = new LinkedHashMap<String, String>();
		if (ZStringUtils.isEmpty(str)) {
			return map;
		}
		String[] scripts = str.split(token);
		for (int i = 0; i < scripts.length; i++) {
			if (StringUtil.isEmpty(scripts[i])) {
				continue;
			}
			String[] kvStrings = scripts[i].split(subToken);
			if (kvStrings.length < 1) {
				continue;
			}
			String key = kvStrings[0];
			String value = "";
			if (kvStrings.length > 1) {
				value = kvStrings[1];
			}
			if (kvStrings.length > 2) {
				for (int j = 2; j < kvStrings.length; j++) {
					value = value + subToken + kvStrings[j];
				}
			}
			map.put(key, value);
		}
		return map;
	}

	/**
	 * 列定义转成ColConfigBean对象
	 */
//	public static ColConfigBean split4ConfigBean(String str, String token, String subToken) {
//		ColConfigBean ccb = new ColConfigBean();
//		String[] scripts = str.split(token);
//		for (int i = 0; i < scripts.length; i++) {
//			String[] kvStrings = scripts[i].split(subToken);
//			if (kvStrings.length == 1) {
//			}
//			String attr = kvStrings[0];
//			String value = kvStrings[1];
//			if (kvStrings.length > 2) {
//				for (int j = 2; j < kvStrings.length; j++) {
//					value = value + subToken + kvStrings[j];
//				}
//			}
//			ccb.setAttr(attr, value);
//		}
//		return ccb;
//	}

	public static boolean isTrueStr(String onlyLableVal) {
		return "true".equals(onlyLableVal);
	}

	/**
	 * 返回Sap消息类型: S 成功,E 错误,W 警告,I 信息,A 中断
	 * 
	 * @param str
	 * @return
	 */
	public static String convertSapInfoType(String str) {
		if (StringUtil.isEmpty(str))
			return "未知信息类型";
		str = str.trim();
		if (str.equals("S")) {
			str = "成功";
		} else if (str.equals("E")) {
			str = "错误";
		} else if (str.equals("W")) {
			str = "警告";
		} else if (str.equals("I")) {
			str = "信息";
		} else if (str.equals("A")) {
			str = "中断";
		} else {
			str = "未知信息类型--" + str;
		}
		return str;
	}

	/**
	 * 获取SAP字段值为String
	 * 
	 * @return
	 */
	public static String getSapFieldValue(Object obj) {
		if (obj != null)
			return obj.toString();
		return "";

	}

	/**
	 * 去前导0;
	 * 
	 * @param field
	 * @return String
	 */
	public static String killPerZero(String str) {
		if (str == null || "".equals(str))
			return str;
		str = str.trim();
		char[] charArr = str.trim().toCharArray();
		int length = charArr.length;
		int j = 0;
		for (int i = 0; i < length; i++) {
			if ('0' == charArr[i]) {
				j++;
			} else {
				break;
			}
		}
		if (j == length) {
			return "0";
		} else {
			return str.substring(j, length).trim();
		}
	}

	/**
	 * 删除小数点后面的字符
	 * 
	 * @author jamesluo luoliuqiang@sina.com 2011-1-5 下午02:52:10
	 * @param str
	 * @return
	 */
	public static String delAfterPointStr(String str) {

		if (str == null || "".equals(str))
			return str;
		char[] charArr = str.toCharArray();
		int length = charArr.length;
		int j = 0;
		for (int i = 0; i < length; i++) {
			if ('.' != charArr[i]) {
				j++;
			} else {
				break;
			}
		}
		if (j == length) {
			return "0";
		} else {
			return str.substring(0, j);
		}

	}

	public static String uppperCase(String str) {
		if (str != null) {
			str = str.toUpperCase();
		}
		return str;
	}
	public static Object killPerZero(Object obj) {
		if (obj == null || "".equals(obj))
			return obj;
		if (obj instanceof String) {
			return killPerZero(obj.toString());
		}
		return obj;
		
	}
	/**
	 * 给SAP的输入字段加前导0
	 * @param recnnr 要处理的字段
	 * @param fieldSize 字段长度
	 */
//	public static void sapPerZero(SapFileConditionBean recnnr,int fieldSize) {
//		if (recnnr != null) {
//			List<SapConditionBean> conditions = recnnr.getConditions();
//			if (conditions != null && conditions.size() > 0) {
//				for (SapConditionBean c : conditions) {
//					c.setLow(ZStringUtils.ZeroPer(c.getLow(), fieldSize));
//					c.setHigh(ZStringUtils.ZeroPer(c.getHigh(), fieldSize));
//				}
//			}
//		}
//	}
	/**
	 * 给SAP的输入字段加前导0，并转大写
	 * @param recnnr 要处理的字段
	 * @param fieldSize 字段长度
	 */
//	public static  void sapUpcaseAndSize(SapFileConditionBean recnnr,int fieldSize) {
//		if (recnnr != null) {
//			List<SapConditionBean> conditions = recnnr.getConditions();
//			if (conditions != null && conditions.size() > 0) {
//				for (SapConditionBean c : conditions) {
//					c.setLow(ZStringUtils.ZeroPer(ZStringUtils.uppperCase(c.getLow()), fieldSize));
//					c.setHigh(ZStringUtils.ZeroPer(ZStringUtils.uppperCase(c.getHigh()), fieldSize));
//				}
//			}
//		}
//	}
	/**
	 * 给SAP的输入字段转大写
	 * @param recnnr 要处理的字段
	 */
//	public static void sapUpcase(SapFileConditionBean recnnr) {
//		if (recnnr != null) {
//			List<SapConditionBean> conditions = recnnr.getConditions();
//			if (conditions != null && conditions.size() > 0) {
//				for (SapConditionBean c : conditions) {
//					c.setLow(ZStringUtils.uppperCase(c.getLow()));
//					c.setHigh(ZStringUtils.uppperCase(c.getHigh()));
//				}
//			}
//		}
//	}
	public static boolean isObjStrEqual(Object a,Object b){
		return ZStringUtils.killNullToStr(a).equals(ZStringUtils.killNullToStr(b));
	}
	
	public static String readProperties() {
		String deve = "";
		try {
			URL url = Thread.currentThread().getContextClassLoader().getResource("");
			String path = url.getPath();//.replaceAll("/WEB-INF/classes/", "");
			File file=new File(path+"/"+"config.properties");
			Properties properties=new Properties();
			properties.load(new FileInputStream(file));
			deve = properties.getProperty("config.app.development");
			return deve;
		}catch(IOException e) {
			e.printStackTrace();
		}
		return deve;
	}
}
